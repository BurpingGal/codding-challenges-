package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func buildPathToRoot(emp string, tree map[string]string) map[string]int {
	path := make(map[string]int)
	level := 0
	for emp != "" {
		path[emp] = level
		manager, exists := tree[emp]
		if !exists {
			break
		}
		emp = manager
		level++
	}
	return path
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	// Read first line: target pair
	scanner.Scan()
	pair := strings.Split(scanner.Text(), "/")
	if len(pair) != 2 {
		fmt.Println("0")
		return
	}
	a, b := pair[0], pair[1]

	// Build employee -> manager map
	tree := make(map[string]string)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, "/")
		if len(parts) != 2 {
			continue
		}
		emp, mgr := parts[0], parts[1]
		tree[emp] = mgr
	}

	// Get paths from both employees to root
	pathA := buildPathToRoot(a, tree)
	pathB := buildPathToRoot(b, tree)

	// Find lowest common ancestor and compute levels
	minLevelSum := -1
	for nodeA, levelA := range pathA {
		if levelB, exists := pathB[nodeA]; exists {
			sum := levelA + levelB
			if minLevelSum == -1 || sum < minLevelSum {
				minLevelSum = sum
			}
		}
	}

	// Print result
	if minLevelSum == -1 {
		fmt.Println("0")
	} else {
		fmt.Println(minLevelSum)
	}
}
